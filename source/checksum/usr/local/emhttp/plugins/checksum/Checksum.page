Menu="Utilities"
Title="Checksum Creator"
Icon="checksum.png"
---
<?

#################################################
##                                             ##
##  Checksum.  Copyright 2015, Andrew Zawadzki ##
##                                             ##
#################################################


$plugin = "checksum";
$checksumPaths['usbSettings']       = "/boot/config/plugins/$plugin/settings.json";
$checksumPaths['tmpSettings']       = "/tmp/checksum/temp.json";
$checksumPaths['Settings']          = "/var/local/emhttp/plugins/$plugin/settings.json";
$checksumPaths['Waiting']           = "/tmp/checksum/waiting";
$checksumPaths['Parity']            = "/tmp/checksum/parity";
$checksumPaths['Running']           = "/tmp/checksum/running";
$checksumPaths['Log']               = "/tmp/checksum/log.txt";

$unRaidPaths['Variables']           = "/var/local/emhttp/var.ini";

$scriptPaths['CreateWatch']         = "/usr/local/emhttp/plugins/$plugin/scripts/checksumInotify.sh";
$scriptPaths['b2sum']               = "/usr/local/emhttp/plugins/$plugin/include/b2sum";
$scriptPaths['MonitorWatch']        = "/usr/local/emhttp/plugins/$plugin/scripts/checksumInotify1.sh";
$scriptPaths['inotifywait']         = "/usr/bin/inotifywait";
$scriptPaths['checksuminotifywait'] = "/tmp/checksum/checksum_inotifywait";

$unRaidVariables = parse_ini_file("/var/local/emhttp/var.ini");
$unRaidStarted = $unRaidVariables['mdState'] == "STARTED" ? "true" : "false";


?>
<script>
var URL = "/plugins/<?=$plugin?>/include/exec.php";

$(function(){

if ( <?=$unRaidStarted?> == false )
{
    swal({
      title: "unRaid array not started",
      text: "The array must be started to make changes to this plugin",
      html: true,
      showConfirmButton: false,
      type: "error"
    });
    return;

}


$.post(URL,{action:'inotifywait'},function(data) {
  if (data)
  {
    $("#restart").prop("disabled",true);
    swal({
      title: "inotify tools not installed!",
      text: "This plugin requires the nerd pack plugin to be installed.\nSee here:\n<a href='https://lime-technology.com/forum/index.php?topic=37541.0' target='_blank'>Nerd Pack Plugin</a>",
      html: true,
      type: "error"
    });
  }
});


setInterval(function() { statusDisplay(); },1500);
setInterval(function() { showLogLine(); }, 5000);
statusDisplay();
showLogLine();

$.post(URL,{action:'initialize'},function(data) {
  if (data) {
    $("#settings").html(data);
  }
});

});

function showLogLine()
{
  $.post(URL,{action:'logline'},function(data) {
    if (data) {
      $("#logged").html(data);
    }
  });
}


function statusDisplay()
{
  $.post(URL,{action:'status'},function(data) {
    if (data) {
      $("#status").html(data);
    }
  });
}


function enableApply(index)
{
  if ( $("#apply"+index).prop("disabled") )
  {
    $("#apply"+index).prop("disabled",false);
    $("#run"+index).prop("disabled",true);
  }
}

function disableApply(index)
{
  $("#apply"+index).prop("disabled",true);
  $("#run"+index).prop("disabled",true);
}

function shareChanged(index)
{
  var selected = $("#share"+index).val();
  $("#restartNeeded").html("<font color='red'>Restart of monitor required for changes to take effect </font>");
  disableApply(index);
  if ( selected == "***" )
  {
    $("#custom"+index).prop("disabled",false);
    validatePath(index);
  } else {
    $("#custom"+index).prop("disabled",true);
    $("#patherror"+index).html(" ");
    enableApply(index);
  }
}

function includeChanged(index)
{
  var selected = $("#includeall"+index).val();

  if ( selected == "no" )
  {
    $("#included"+index).prop("disabled",false);
    $("#excluded"+index).prop("disabled",false);
  } else {
    $("#included"+index).prop("disabled",true);
    $("#excluded"+index).prop("disabled",true);
  }
  enableApply(index);
  validateInclude(index);
}

function validatePath(index)
{
  var path = $("#custom"+index).val();
  var share = $("#share"+index).val();
  
  switch (share) {
    case 'undefined':
      $("#apply"+index).prop("disabled",false);
      $("#run"+index).prop("disabled",trued);
      break;
    case '***':
      $.post(URL,{action:'validate_path',index:index,path:path},function(data) {
        if (data) {
          $("#patherror"+index).html(data);
          if ( data.indexOf("red") == -1 )
          {
            $("#apply"+index).prop("disabled",false);
            $("#run"+index).prop("disabled",true);
          } else {
            $("#apply"+index).prop("disabled",true);
            $("#run"+index).prop("disabled",false);
          }
        }
      });
      break;
  }
}
  
function apply(index)
{
  var share = $("#share"+index).val();
  var custom = $("#custom"+index).val();
  var algorithm = $("#algorithm"+index).val();
  var changed = $("#update"+index).val();
  var separate = $("#separate"+index).val();
  var monitor = $("#monitor"+index).val();
  var extension = $("#extension"+index).val();

  if ( extension != ".hash" ) { extension = algorithm; }

  var includeall = $("#includeall"+index).val();
  var included = $("#included"+index).val();
  var excluded = $("#excluded"+index).val();

  var parity = $("#parity").val();
  var pause = $("#pause").val();

  $.post(URL,{action:'apply',index:index,share:share,custom:custom,changed:changed,algorithm:algorithm,separate:separate,extension:extension,includeall:includeall,included:included,excluded:excluded,monitor:monitor}, function(data) {
     if (data) {
     }
  });
  disableApply(index);
  $("#run"+index).prop("disabled",false);
}
  
function deleteMonitor(index)
{
  swal({
    title: "Are you sure you want to stop monitoring this share?",
    type: "warning",
    showCancelButton: true,
    closeOnCancel: true,
    closeOnConfirm: false
  },function(isConfirm)
  {
    if ( isConfirm )
    {
      $.post(URL,{action:'delete',index:index}, function(data)
      {
        if (data)
        {
          $("#settings").html(data);
          swal({
            title: "Settings Updated",
            text: "You will need to restart the background process to complete the process",
            timer: 20000,
            showConfirmButton: true
          });
        }
      });
    }


  }
  );
}

function addMonitor()
{
  $.post(URL,{action:'add'},function(data)
  {
    if (data)
    {
      $("#settings").html(data);
      $("#restartNeeded").html("<font color='red'>Restart of monitor required for changes to take effect </font>");
    }
  });
}

function changeMonitor(index)
{
  $("#apply"+index).prop("disabled",false);
  $("#restartNeeded").html("<font color='red'>Restart of monitor required for changes to take effect </font>");
}

function restartMonitor()
{
  swal({
    imageUrl: "/plugins/checksum/images/spinner2.gif",
    imageSize: "20x20",
    title: "Starting Background Process",
    text: "This will take about 15 seconds",
    showConfirmButton: false
  });

  $.post(URL,{action:'start_monitor'},function(data)
  {
    if (data)
    {
      $("#restart").prop("disabled",false);
      $("#restartNeeded").html(" ");
  swal({
    title: "",
    text: "You need to wait until the log shows <em><b>Watches Established</b></em> prior to queueing any jobs.<br><br>Depending upon your file structure, that may take a minute or so",
    html: true,
    type: "warning",
    showConfirmButton: true
  });

    }
  });
}

function stopMonitor()
{
  swal({
    imageUrl: "/plugins/checksum/images/spinner2.gif",
    imageSize: "20x20",
    title: "Stopping Background Process",
    text: "This will take about 15 seconds",
    showConfirmButton: false
  });

  $.post(URL,{action:'stop_monitor'},function(data)
  {
    if (data)
    {
  swal({
    title: "",
    text: "Any scans queued up have probably been lost",
    html: true,
    type: "warning",
    showConfirmButton: true
  });

    }
  });
}


function runNow(index)
{
  var share = $("#share"+index).val();  
  var custom = $("#custom"+index).val();

  $("#run"+index).prop("disabled",true);

  $.post(URL,{action:'run_now',share:share,custom:custom},function(data)
  {
    if (data)
    {
      $("#run"+index).prop("disabled",false);
    }
  });
}

function changeGlobal()
{
  $("#globalApply").prop("disabled",false);
}

function globalApply()
{
  var parity = $("#parity").val();
  var pause = $("#pause").val();
  var ignorehour = $("#ignoreHour").val();
  var numwatches = $('#numwatches').val();
  var numqueue = $('#numqueue').val();

  $.post(URL,{action:'change_global',parity:parity,pause:pause,ignorehour:ignorehour,numwatches:numwatches,numqueue:numqueue});
  $("#globalApply").prop("disabled",true);
}

function validateInclude(index)
{
  if ( ! $("#included"+index).prop("disabled") )
  {
    var allCharacters = $("#included"+index).val();
    allCharacters = allCharacters.concat($("#excluded"+index).val());
    allCharacters = allCharacters.trim();
    var length = allCharacters.length;

    if ( length == 0 )
    {
      $("#includeerror"+index).html("<font color='red'>You must include at least 1 term</font>");
      $("#apply"+index).prop("disabled",true);
    } else {
      $("#includeerror"+index).html(" ");
      $("#apply"+index).prop("disabled",false);
    }
  } else {
  $("#includeerror"+index).html(" ");
  }
}

function verifyNow(index)
{
  var share = "/mnt/user/".concat($("#share"+index).val());
  var percent = $("#percent"+index).val();
  var lastPercent = $("#last"+index).val();

  if ( share == "/mnt/user/***" )
  {
    share = $("#custom"+index).val();
  }

  $("#verify"+index).prop("disabled",true);

  $.post(URL,{action:'verify_now',share:share,percent:percent,lastPercent:lastPercent}, function(data)
  {
    if (data)
    {
      $("#verify"+index).prop("disabled",false);
    }
  });

}


function logButton(whichLog)
{
  openWindow('/plugins/checksum/scripts/showlog.sh&arg1='+whichLog,'Checksum Log',900,1500);
}

function validateWatches()
{
  $('#globalApply').prop('disabled',false);
  $("#restartNeeded").html("<font color='red'>Restart of monitor required for changes to take effect </font>");
}

</script>
<input type='button' value='Stop Monitor' id='stop' onclick='stopMonitor();'></input><input type='button' id='restart' value='Start Monitor' onclick='restartMonitor();'></input><span id='restartNeeded'></span><font size='2'><b>Monitor Status: <span id='status'></span></b></font>
<span style='float:right'><input type='button' value='Creator Log' onclick='logButton("checksumLog.txt");'></input><input type='button' value='Verify Log' onclick='logButton("verifylog.txt");'></input><input type='button' value='CommandLog' onclick='logButton("log.txt");'></input></span><br>
<font size='0' face='Courier New'><span id='logged'></span></font><br>
<center><font size='3'><b>Global Settings</b></font></center><br>
<center><b>Pause During Parity Check / Rebuild: </b>
<select id='parity' onchange='changeGlobal();'>
  <option value='yes'>Yes</option>
  <option value='no'>No</option>
</select>
<b>Pause Before Calculating: </b>
<select id='pause' onchange='changeGlobal();'>
<option value='60'>1 Minute</option>
<option value='300'>5 Minutes</option>
<option value='600'>10 Minutes</option>
<option value='1800'>30 Minutes</option>
<option value='3600'>1 Hour</option>
</select>
<b>Ignore Minor Corz Time Stamp Issues (see help)</b>
<select id='ignoreHour' onchange='changeGlobal();'>
  <option value='yes'>Yes</option>
  <option value='no'>No</option>
</select><br>
<b>Maximum Number Of inotify Watches:</b> <input type='number' id='numwatches' class='narrow' oninput='validateWatches();'></input>
<b> Maximum Number Of Queued Events: </b> <input type='number' id='numqueue' class='narrow' oninput='validateWatches();'></input>
<input type='button' id='globalApply' onclick='globalApply();' value='Apply' disabled></input></center>
> <b> Pause during Parity Check / Rebuild </b>  This option will pause the creation of any checksum files during a parity check / rebuild AFTER the file in progress (if any) is completed<br>
> <b> Pause before Calculating </b>  This option will wait the specified amount of time after a change has occurred to a monitored folder before begin its calculations.  Useful to let the system calm down before beginning the calculations
> <b> Ignore Minor Corz Time Stamp Issues</b> Ignore <em>Explainable</em> issues with time stamps generated by Corz for Windows.  These errors are time stamps occasionally out by 1 Hour +/- 1 second, and +/- 1 second<br>
> <b> Maximum Number of Inotify Watches</b> If the log shows an error about an inadequate number of watches, increase this number (try adding 100000)<br>
> <b> Maximum Number of Queued Events</b> Maximum number of events that can happen within a very short period.  Setting too lower will result in missed writes<br>
<hr><br><center><font size='3'><b>Share Settings</b></font></center><hr><br><br>
<span id="settings"></span>

> <b>Share To Monitor</b> Set to either a user share, or to Custom and enter the full path to the folder.  Note that <b>appdata</b> (if present) will not appear in the drop down list. <b>Note that changes to this entry (after hitting APPLY will also require you to restart background monitor program.</b><br>
> <b>Algorithm to use</b> For full compatibility with corz checksum, use either <b>md5, sha1, blake2</b>  <b><font color='red'>NOTE</font></b>  If you are using (or planning on using) Corz checksum for windows, SHA256 is NOT supported by that program<br>
> <b>Single Checksum file Per Folder</b> Setting to yes will create a single checksumfile for the entire folder (named the <em>folder name.hash</em>  Set to no will create a separate checksum file for each file<br>
> <b>Include All Files</b> Yes will scan every file.  No will only create checksum's for the files matching the Included / Excluded file lists<br>
> <b>Included / Excluded Files</b>Space separated file masks.  EG: <b>*.mkv *.avi *.mpv</b><br>
> <b>Update Changed Files</b>If set to no, if the system detects a change to a file already having a calculated checksum, it will not update the checksum file<br>
> <b>Extension for Checksum File</b> If set to <em>checksum algorithm</em> will use either .md5, .sha1, .sha256, or .blake2 as a file extension for the checksum files<br>
> <b>Monitor Folder</b>Yes will allow the system to automatically calculate checksums for new / changed files as they happen <b>Changes require a restart of the background process</b><br>
> <b>Add To Queue</b>This will initiate (add to the current job queue) a complete scan for new / changed files to the specified folder<br>

<center><input type='button' value='Add Monitored Share' id='addMonitor' onclick='addMonitor();'></input></center>
<span id="FuckUps"></span>
<span id="debug"></span>
